# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_twslinkpt', [dirname(__file__)])
        except ImportError:
            import _twslinkpt
            return _twslinkpt
        if fp is not None:
            try:
                _mod = imp.load_module('_twslinkpt', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _twslinkpt = swig_import_helper()
    del swig_import_helper
else:
    import _twslinkpt
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class TWSLinkWrap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TWSLinkWrap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TWSLinkWrap, name)
    __repr__ = _swig_repr
    def __init__(self, load = False): 
        this = _twslinkpt.new_TWSLinkWrap(load)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _twslinkpt.delete_TWSLinkWrap
    __del__ = lambda self : None;
    def Load(self, lock = True, expath = None): return _twslinkpt.TWSLinkWrap_Load(self, lock, expath)
    def Unload(self, code = 0, bdeleteerror = True, lock = True): return _twslinkpt.TWSLinkWrap_Unload(self, code, bdeleteerror, lock)
    def InternalLoad(self, lock = True): return _twslinkpt.TWSLinkWrap_InternalLoad(self, lock)
    def InternalUnload(self, lock = True): return _twslinkpt.TWSLinkWrap_InternalUnload(self, lock)
    __swig_getmethods__["InstanceCount"] = lambda x: _twslinkpt.TWSLinkWrap_InstanceCount
    if _newclass:InstanceCount = staticmethod(_twslinkpt.TWSLinkWrap_InstanceCount)
    def REGISTER_CONTRACT(self, *args): return _twslinkpt.TWSLinkWrap_REGISTER_CONTRACT(self, *args)
    def REGISTER_CONTRACT2(self, *args): return _twslinkpt.TWSLinkWrap_REGISTER_CONTRACT2(self, *args)
    def REGISTER_CONTRACT_XML(self, *args): return _twslinkpt.TWSLinkWrap_REGISTER_CONTRACT_XML(self, *args)
    def REGISTER_CONTRACT_XML_STYLE(self, *args): return _twslinkpt.TWSLinkWrap_REGISTER_CONTRACT_XML_STYLE(self, *args)
    def GET_CONTRACTUID_LIST(self, *args): return _twslinkpt.TWSLinkWrap_GET_CONTRACTUID_LIST(self, *args)
    def WAIT_FOR_ACCEPTED(self, *args): return _twslinkpt.TWSLinkWrap_WAIT_FOR_ACCEPTED(self, *args)
    def ADD_COMBO_LEG(self, *args): return _twslinkpt.TWSLinkWrap_ADD_COMBO_LEG(self, *args)
    def REM_COMBO_LEG(self, *args): return _twslinkpt.TWSLinkWrap_REM_COMBO_LEG(self, *args)
    def REQ_MARKET_DATA(self, *args): return _twslinkpt.TWSLinkWrap_REQ_MARKET_DATA(self, *args)
    def REQ_MARKET_DEPTH(self, *args): return _twslinkpt.TWSLinkWrap_REQ_MARKET_DEPTH(self, *args)
    def REQ_BAR_DATA(self, *args): return _twslinkpt.TWSLinkWrap_REQ_BAR_DATA(self, *args)
    def GET_MARKET_DATA(self, *args): return _twslinkpt.TWSLinkWrap_GET_MARKET_DATA(self, *args)
    def GET_BAR_DATA(self, *args): return _twslinkpt.TWSLinkWrap_GET_BAR_DATA(self, *args)
    def GET_MARKET_DEPTH(self, *args): return _twslinkpt.TWSLinkWrap_GET_MARKET_DEPTH(self, *args)
    def GET_MARKET_DEPTH2(self, *args): return _twslinkpt.TWSLinkWrap_GET_MARKET_DEPTH2(self, *args)
    def GET_TICK(self, *args): return _twslinkpt.TWSLinkWrap_GET_TICK(self, *args)
    def WAIT_FOR_TICK(self, *args): return _twslinkpt.TWSLinkWrap_WAIT_FOR_TICK(self, *args)
    def EXTRACT_MARKET_DATA(self, *args): return _twslinkpt.TWSLinkWrap_EXTRACT_MARKET_DATA(self, *args)
    def VALIDATE_PRICE(self, *args): return _twslinkpt.TWSLinkWrap_VALIDATE_PRICE(self, *args)
    def PIPS(self, *args): return _twslinkpt.TWSLinkWrap_PIPS(self, *args)
    def EXTRACT_ARRAY_VALUE(self, *args): return _twslinkpt.TWSLinkWrap_EXTRACT_ARRAY_VALUE(self, *args)
    def WAIT_FOR_REQ_PROCESSED(self, *args): return _twslinkpt.TWSLinkWrap_WAIT_FOR_REQ_PROCESSED(self, *args)
    def REQ_ACC_UPDATE(self, *args): return _twslinkpt.TWSLinkWrap_REQ_ACC_UPDATE(self, *args)
    def WAITDLL(self, *args): return _twslinkpt.TWSLinkWrap_WAITDLL(self, *args)
    def WAIT_FOR_EVENT(self, *args): return _twslinkpt.TWSLinkWrap_WAIT_FOR_EVENT(self, *args)
    def GET_EVENT_VAL(self, *args): return _twslinkpt.TWSLinkWrap_GET_EVENT_VAL(self, *args)
    def GET_EVENT_VAL_I(self, *args): return _twslinkpt.TWSLinkWrap_GET_EVENT_VAL_I(self, *args)
    def GET_EVENT_VAL_D(self, *args): return _twslinkpt.TWSLinkWrap_GET_EVENT_VAL_D(self, *args)
    def START_APPLICATION(self, *args): return _twslinkpt.TWSLinkWrap_START_APPLICATION(self, *args)
    def GET_CONTRACT_STATUS(self, *args): return _twslinkpt.TWSLinkWrap_GET_CONTRACT_STATUS(self, *args)
    def PLACE_ORDER(self, *args): return _twslinkpt.TWSLinkWrap_PLACE_ORDER(self, *args)
    def TOGGLE_ORDER(self, *args): return _twslinkpt.TWSLinkWrap_TOGGLE_ORDER(self, *args)
    def TOGGLE_ORDER_PCT(self, *args): return _twslinkpt.TWSLinkWrap_TOGGLE_ORDER_PCT(self, *args)
    def SET_ORDER_VAL(self, *args): return _twslinkpt.TWSLinkWrap_SET_ORDER_VAL(self, *args)
    def GET_ORDER_VAL(self, *args): return _twslinkpt.TWSLinkWrap_GET_ORDER_VAL(self, *args)
    def TRANSMIT(self, *args): return _twslinkpt.TWSLinkWrap_TRANSMIT(self, *args)
    def GET_ORDERUID_LIST(self, *args): return _twslinkpt.TWSLinkWrap_GET_ORDERUID_LIST(self, *args)
    def GET_OPEN_ORDERUID_LIST(self, *args): return _twslinkpt.TWSLinkWrap_GET_OPEN_ORDERUID_LIST(self, *args)
    def GET_EXECUTION_PRICE(self, *args): return _twslinkpt.TWSLinkWrap_GET_EXECUTION_PRICE(self, *args)
    def CONVERT_ID(self, *args): return _twslinkpt.TWSLinkWrap_CONVERT_ID(self, *args)
    def CONVERT_ID_STRING(self, *args): return _twslinkpt.TWSLinkWrap_CONVERT_ID_STRING(self, *args)
    def SET_FA_MEMBERS(self, *args): return _twslinkpt.TWSLinkWrap_SET_FA_MEMBERS(self, *args)
    def WAIT_FOR_ORDER_STATUS(self, *args): return _twslinkpt.TWSLinkWrap_WAIT_FOR_ORDER_STATUS(self, *args)
    def WAIT_FOR_FILLED(self, *args): return _twslinkpt.TWSLinkWrap_WAIT_FOR_FILLED(self, *args)
    def WAIT_FOR_SUBMITTED(self, *args): return _twslinkpt.TWSLinkWrap_WAIT_FOR_SUBMITTED(self, *args)
    def WAIT_FOR_ORDER_STATUS_RNG(self, *args): return _twslinkpt.TWSLinkWrap_WAIT_FOR_ORDER_STATUS_RNG(self, *args)
    def GET_ORDER_STATUS(self, *args): return _twslinkpt.TWSLinkWrap_GET_ORDER_STATUS(self, *args)
    def GET_ORDER_ERROR(self, *args): return _twslinkpt.TWSLinkWrap_GET_ORDER_ERROR(self, *args)
    def ORDER_MODIFIABLE(self, *args): return _twslinkpt.TWSLinkWrap_ORDER_MODIFIABLE(self, *args)
    def GET_ACC_VAL(self, *args): return _twslinkpt.TWSLinkWrap_GET_ACC_VAL(self, *args)
    def GET_MARKET_VAL(self, *args): return _twslinkpt.TWSLinkWrap_GET_MARKET_VAL(self, *args)
    def GET_PORTFOLIO_VAL(self, *args): return _twslinkpt.TWSLinkWrap_GET_PORTFOLIO_VAL(self, *args)
    def GET_CONTRACT_VAL(self, *args): return _twslinkpt.TWSLinkWrap_GET_CONTRACT_VAL(self, *args)
    def SET_CONTRACT_VAL(self, *args): return _twslinkpt.TWSLinkWrap_SET_CONTRACT_VAL(self, *args)
    def GET_BASECURRENCY(self, *args): return _twslinkpt.TWSLinkWrap_GET_BASECURRENCY(self, *args)
    def GET_CASH_BALANCE(self, *args): return _twslinkpt.TWSLinkWrap_GET_CASH_BALANCE(self, *args)
    def GET_EXCHANGE_RATE(self, *args): return _twslinkpt.TWSLinkWrap_GET_EXCHANGE_RATE(self, *args)
    def GET_ACC_NAME(self, *args): return _twslinkpt.TWSLinkWrap_GET_ACC_NAME(self, *args)
    def GET_POSITIONS(self, *args): return _twslinkpt.TWSLinkWrap_GET_POSITIONS(self, *args)
    def CANCEL_ORDER(self, *args): return _twslinkpt.TWSLinkWrap_CANCEL_ORDER(self, *args)
    def CLOSE_CONTRACT(self, *args): return _twslinkpt.TWSLinkWrap_CLOSE_CONTRACT(self, *args)
    def CLOSE_CASH_POSITION(self, *args): return _twslinkpt.TWSLinkWrap_CLOSE_CASH_POSITION(self, *args)
    def FORCE_CONTRACT(self, *args): return _twslinkpt.TWSLinkWrap_FORCE_CONTRACT(self, *args)
    def CONNECT_XML(self, *args): return _twslinkpt.TWSLinkWrap_CONNECT_XML(self, *args)
    def CONNECT(self, *args): return _twslinkpt.TWSLinkWrap_CONNECT(self, *args)
    def DISCONNECT(self): return _twslinkpt.TWSLinkWrap_DISCONNECT(self)
    def SET_DLL_PARAM(self, *args): return _twslinkpt.TWSLinkWrap_SET_DLL_PARAM(self, *args)
    def DISPOSE(self, *args): return _twslinkpt.TWSLinkWrap_DISPOSE(self, *args)
    def GET_DLL_PARAM(self, *args): return _twslinkpt.TWSLinkWrap_GET_DLL_PARAM(self, *args)
    def GET_CONNECTED(self): return _twslinkpt.TWSLinkWrap_GET_CONNECTED(self)
    def CUSTOMCOMMENT(self, *args): return _twslinkpt.TWSLinkWrap_CUSTOMCOMMENT(self, *args)
    def CUSTOMLOG(self, *args): return _twslinkpt.TWSLinkWrap_CUSTOMLOG(self, *args)
    def DELETE_CUSTOMLOG(self, *args): return _twslinkpt.TWSLinkWrap_DELETE_CUSTOMLOG(self, *args)
    def SEND_MAIL(self, *args): return _twslinkpt.TWSLinkWrap_SEND_MAIL(self, *args)
    def SEND_REPORT(self, *args): return _twslinkpt.TWSLinkWrap_SEND_REPORT(self, *args)
    def TO_FILE(self, *args): return _twslinkpt.TWSLinkWrap_TO_FILE(self, *args)
    def FROM_FILE(self, *args): return _twslinkpt.TWSLinkWrap_FROM_FILE(self, *args)
    def GET_INT_VAR(self, *args): return _twslinkpt.TWSLinkWrap_GET_INT_VAR(self, *args)
    def GET_DBL_VAR(self, *args): return _twslinkpt.TWSLinkWrap_GET_DBL_VAR(self, *args)
    def GET_STR_VAR(self, *args): return _twslinkpt.TWSLinkWrap_GET_STR_VAR(self, *args)
    def SET_INT_VAR(self, *args): return _twslinkpt.TWSLinkWrap_SET_INT_VAR(self, *args)
    def SET_DBL_VAR(self, *args): return _twslinkpt.TWSLinkWrap_SET_DBL_VAR(self, *args)
    def SET_STR_VAR(self, *args): return _twslinkpt.TWSLinkWrap_SET_STR_VAR(self, *args)
    def REM_INT_VAR(self, *args): return _twslinkpt.TWSLinkWrap_REM_INT_VAR(self, *args)
    def REM_DBL_VAR(self, *args): return _twslinkpt.TWSLinkWrap_REM_DBL_VAR(self, *args)
    def REM_STR_VAR(self, *args): return _twslinkpt.TWSLinkWrap_REM_STR_VAR(self, *args)
    def GET_INT(self, *args): return _twslinkpt.TWSLinkWrap_GET_INT(self, *args)
    def GET_DBL(self, *args): return _twslinkpt.TWSLinkWrap_GET_DBL(self, *args)
    def GET_STR(self, *args): return _twslinkpt.TWSLinkWrap_GET_STR(self, *args)
    def ADD_INT(self, *args): return _twslinkpt.TWSLinkWrap_ADD_INT(self, *args)
    def ADD_DBL(self, *args): return _twslinkpt.TWSLinkWrap_ADD_DBL(self, *args)
    def NEWS_BULLETIN(self, *args): return _twslinkpt.TWSLinkWrap_NEWS_BULLETIN(self, *args)
    def REQ_HIST_DATA(self, *args): return _twslinkpt.TWSLinkWrap_REQ_HIST_DATA(self, *args)
    def REQ_CURRENT_TIME(self, *args): return _twslinkpt.TWSLinkWrap_REQ_CURRENT_TIME(self, *args)
    def REQ_SCANNER_PARAMETER(self, *args): return _twslinkpt.TWSLinkWrap_REQ_SCANNER_PARAMETER(self, *args)
    def REQ_SCANNER_SUBSCRIPTION(self, *args): return _twslinkpt.TWSLinkWrap_REQ_SCANNER_SUBSCRIPTION(self, *args)
    def CANCEL_SCANNER_SUBSCRIPTION(self, *args): return _twslinkpt.TWSLinkWrap_CANCEL_SCANNER_SUBSCRIPTION(self, *args)
    def DISCONNECT_DB(self, *args): return _twslinkpt.TWSLinkWrap_DISCONNECT_DB(self, *args)
    def CONNECT_DB(self, *args): return _twslinkpt.TWSLinkWrap_CONNECT_DB(self, *args)
    def SQL(self, *args): return _twslinkpt.TWSLinkWrap_SQL(self, *args)
    def SQL2(self, *args): return _twslinkpt.TWSLinkWrap_SQL2(self, *args)
    def SET_EVENT_HANDLER(self, *args): return _twslinkpt.TWSLinkWrap_SET_EVENT_HANDLER(self, *args)
    def SET_EVENT_HANDLER_OLE(self, *args): return _twslinkpt.TWSLinkWrap_SET_EVENT_HANDLER_OLE(self, *args)
    def REM_EVENT_HANDLER(self, *args): return _twslinkpt.TWSLinkWrap_REM_EVENT_HANDLER(self, *args)
    def TIME_STRING(self, *args): return _twslinkpt.TWSLinkWrap_TIME_STRING(self, *args)
    def TIME_COMPONENT(self, *args): return _twslinkpt.TWSLinkWrap_TIME_COMPONENT(self, *args)
    def SECONDS_1970(self): return _twslinkpt.TWSLinkWrap_SECONDS_1970(self)
    def MILLISECONDS_1970(self): return _twslinkpt.TWSLinkWrap_MILLISECONDS_1970(self)
    def SET_TIMER(self, *args): return _twslinkpt.TWSLinkWrap_SET_TIMER(self, *args)
    def KILL_TIMER(self, *args): return _twslinkpt.TWSLinkWrap_KILL_TIMER(self, *args)
    def PLAY_SOUND(self, *args): return _twslinkpt.TWSLinkWrap_PLAY_SOUND(self, *args)
    def REQ_FUNDAMENTAL_DATA(self, *args): return _twslinkpt.TWSLinkWrap_REQ_FUNDAMENTAL_DATA(self, *args)
    def REQ_EXECUTION_DATA(self, *args): return _twslinkpt.TWSLinkWrap_REQ_EXECUTION_DATA(self, *args)
    def PARSE_XML(self, *args): return _twslinkpt.TWSLinkWrap_PARSE_XML(self, *args)
    def LOGGER(self, *args): return _twslinkpt.TWSLinkWrap_LOGGER(self, *args)
    def LOGGER2(self, *args): return _twslinkpt.TWSLinkWrap_LOGGER2(self, *args)
    def TEST_1(self, *args): return _twslinkpt.TWSLinkWrap_TEST_1(self, *args)
TWSLinkWrap_swigregister = _twslinkpt.TWSLinkWrap_swigregister
TWSLinkWrap_swigregister(TWSLinkWrap)

def TWSLinkWrap_InstanceCount():
  return _twslinkpt.TWSLinkWrap_InstanceCount()
TWSLinkWrap_InstanceCount = _twslinkpt.TWSLinkWrap_InstanceCount

# This file is compatible with both classic and new-style classes.


